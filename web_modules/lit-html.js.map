{"version":3,"file":"lit-html.js","sources":["../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? marker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.1');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map"],"names":[],"mappings":"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"}